---
name: ci
on:
  pull_request:
  push:
    branches:
      - 'release/**'
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v1
        with:
          config_file: .ci/yamllint.yml
          strict: true
  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: shellcheck
        uses: fkautz/shell-linter@v1.0.1
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.35
  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go --exclude=*.pb.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi
  checkgomod:
    name: check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - run: go mod tidy
      - name: Check for changes in go.mod or go.sum
        run: |
          git diff --name-only --exit-code go.mod || ( echo "Run go tidy" && false )
          git diff --name-only --exit-code go.sum || ( echo "Run go tidy" && false )
  aws:
    environment: EKS
    name: Amazon Elastic Kubernetes Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout deployments
        uses: actions/checkout@v2
        with:
          repository: networkservicemesh/deployments-k8s
          path: networkservicemesh/deployments-k8s
      - name: Checkout files
        uses: actions/checkout@v2
        with:
          path: ${{ github.repository }}
      - name: Set up /bin permissions
        run: |
          sudo chmod -R 777 /bin
      - name: Set up go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Setup kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          image: kindest/node:v1.24.0
      - name: Install clusterctl
        working-directory: ${{ github.repository }}
        run: |
          kubectl cluster-info
          curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.2.1/clusterctl-linux-amd64 -o clusterctl
          chmod +x ./clusterctl
          mv ./clusterctl /usr/local/bin/clusterctl
          clusterctl version
      - name: Install clusterawsadm
        working-directory: ${{ github.repository }}
        run: |
          export CLUSTER_TOPOLOGY=true
          curl -L https://github.com/kubernetes-sigs/cluster-api-provider-aws/releases/download/v1.5.0/clusterawsadm-linux-amd64 -o clusterawsadm
          chmod +x clusterawsadm
          mv clusterawsadm /usr/local/bin
          clusterawsadm version
      - name: Setup aws cluster
        working-directory: ${{ github.repository }}
        run: |
          clusterawsadm bootstrap iam create-cloudformation-stack -v
          export AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm bootstrap credentials encode-as-profile)
          clusterctl init --infrastructure aws
          clusterctl generate cluster aws-testing --flavor development \
            --kubernetes-version v1.25.0 \
            --control-plane-machine-count=1 \
            --worker-machine-count=2 \
            > aws-testing.yaml
          kubectl apply -f aws-testing.yaml
          kubectl get clusters
          clusterctl describe cluster aws-testing
          kubectl get kubeadmcontrolplanes
          clusterctl get kubeconfig aws-testing > aws-testing.kubeconfig
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          AWS_CONTROL_PLANE_MACHINE_TYPE: t3.xlarge
          AWS_NODE_MACHINE_TYPE: t3.xlarge
      - name: Run integration tests
        working-directory: ${{ github.repository }}
        run: |
          export CLUSTER_TOPOLOGY=true
          export KUBECONFIG=aws-testing.kubeconfig
          go test -count 1 -timeout 1h55m -race -v ./...
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          AWS_CONTROL_PLANE_MACHINE_TYPE: t3.xlarge
          AWS_NODE_MACHINE_TYPE: t3.xlarge
      - name: Publish test report
        uses: mikepenz/action-junit-report@v2.1.0
        if: ${{ always() }}
        with:
          report_paths: "**/cloud_test/results/junit.xml"
          suite_regex: "Test*"
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Cleanup
        if: ${{ always() }}
        run: |
          kubectl delete cluster aws-testing
          kind delete cluster
      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: logs-${{ github.run_number }}
          path: ${{ github.repository }}/.tests/cloud_test/
